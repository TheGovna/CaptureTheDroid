package rose.capturethedroid;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Socket;

import com.google.android.gms.maps.GoogleMap;

import android.app.Activity;
import android.content.Intent;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.MapFragment;
import com.google.gson.Gson;

public class MainActivity extends Activity {

	private GoogleMap map;

	private static final int RED_TEAM = 0;
	private static final int BLU_TEAM = 1;

	private boolean hasFlag;
	private boolean connected;
	private Coordinate playerloc;

	private int team;

	private Socket socket = null;
	private final int port = 1432;
	private String playerName;

	Gson gson = new Gson();
	PrintWriter out;
	BufferedReader in;

	protected Coordinate[] flagpos;

	protected int gameCondition;// -1:game still running,0:team 0 wins,1:team 1
								// wins

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		// map = ((MapFragment)
		// getFragmentManager().findFragmentById(R.id.map)).getMap();
		this.hasFlag = false;
		this.connected = false;
		this.playerloc = new Coordinate(0, 0);
		this.team = 0;

		// System.out.println("I'm alive");
		Log.e("stuff", "We got here!");
		Toast.makeText(getApplicationContext(), "YAYYYYYYYY",
				Toast.LENGTH_SHORT).show();
		
		new OpenConnection().execute();

		final Handler handler = new Handler();
		handler.post(new Runnable() {

			@Override
			public void run() {
				boolean processing = true;

				if (connected) {
					
					
					if (in == null && out == null) {
						Toast.makeText(getApplicationContext(),
								"Failed to connect", Toast.LENGTH_SHORT).show();
					} else {
						Toast.makeText(getApplicationContext(), "YAYYYYYYYY",
								Toast.LENGTH_SHORT).show();
					}
					// Send information to the server
					// create new JsonObject

					JsonHolder jsonData = new JsonHolder(team, playerName,
							playerloc);
					String json = gson.toJson(jsonData);
					// out.write(json);

					// Get information from the server
					String inputLine = null;
					try {
//						if(in==null||out==null) {
//							Toast.makeText(getApplicationContext(), "still null :(",
//									Toast.LENGTH_LONG).show();
//						}
						inputLine = in.readLine();
						if (inputLine == null) {// if the input is null, wait a
												// bit, then try again
							for (int i = 0; i <= 16; i = i * 2) {
								inputLine = in.readLine();
								if (inputLine == null)
									try {
										Thread.sleep(i * 1000);
									} catch (InterruptedException exception) {
										// TODO Auto-generated catch-block stub.
										exception.printStackTrace();
									}
								else {
									break;
								}
							}
							if (inputLine == null)
								processing = false;
						}
						if (processing == false)
							return;// lost connection with server TODO decide
									// what to do here
					} catch (Exception e) {
						e.printStackTrace();
					}

					// Parse information from the server
					GameInfo gameinfo = gson
							.fromJson(inputLine, GameInfo.class);

					// hasFlag=gameinfo.flagholder;
					// flagpos=gameinfo.flagpos;
					// gameCondition=gameinfo.win;
					// Update map information

					// update hasFlag box here
					if (hasFlag) {
						TextView tv1 = (TextView) findViewById(R.id.text1);
						tv1.setText("You have the enemy flag!");
					} else {
						TextView tv1 = (TextView) findViewById(R.id.text1);
						tv1.setText("Go get the the flag!");
					}

					// Test toast
					Toast.makeText(getApplicationContext(), "Toast",
							Toast.LENGTH_SHORT).show();
				}
				// Delay
				handler.postDelayed(this, 1000); // Refresh time

			}

		});

		// if (savedInstanceState == null) {
		// getSupportFragmentManager().beginTransaction()
		// .add(R.id.container, new PlaceholderFragment()).commit();
		// }
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {

		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	public void showLocation(View view) {

		this.connected = !this.connected;

		GPSTracker gps = new GPSTracker(MainActivity.this);

		// check if GPS enabled
		if (gps.canGetLocation()) {
			double latitude = gps.getLatitude();
			double longitude = gps.getLongitude();

			this.playerloc.longitude = longitude;
			this.playerloc.latitude = latitude;

			// Toast.makeText(
			// getApplicationContext(),
			// "Your location is - \nLat: " + latitude + "\nLong: "
			// + longitude, Toast.LENGTH_SHORT).show();
		} else {
			// can't get location
			// GPS or Network isn't enabled
			// ask user to enable GPS/network in settings
			gps.showSettingsAlert();
		}

	}

	public void displayMap(View view) {

		// Uri location = Uri.parse("geo:" + this.lat + "," + this.longitude +
		// "z=14");
		// Intent mapIntent = new Intent(Intent.ACTION_VIEW, location);
		// startActivity(mapIntent);

	}

	public void chooseRed(View view) {
		this.team = RED_TEAM;
	}

	public void chooseBlu(View view) {
		this.team = BLU_TEAM;
	}

	// /**
	// * A placeholder fragment containing a simple view.
	// */
	// public static class PlaceholderFragment extends Fragment {
	//
	// public PlaceholderFragment() {
	// }
	//
	// @Override
	// public View onCreateView(LayoutInflater inflater, ViewGroup container,
	// Bundle savedInstanceState) {
	// View rootView = inflater.inflate(R.layout.activity_main, container,
	// false);
	// return rootView;
	// }
	// }

	private class OpenConnection extends AsyncTask {

		@Override
		protected Object doInBackground(Object... params) {
			try {
//				Inet4Address inet4 = (Inet4Address) InetAddress
//						.getByName("Eddie");
				socket = new Socket("172.22.119.69", port);
				out = new PrintWriter(socket.getOutputStream(), true);
				in = new BufferedReader(new InputStreamReader(
						socket.getInputStream()));
//				Log.e("Connection Debug message", inet4.toString());
//				Toast.makeText(getApplicationContext(), inet4.toString(),
//						Toast.LENGTH_LONG).show();
			} catch (Exception e) {
				Log.e("Connection Debug message", "Your network failed");
//				Toast.makeText(getApplicationContext(), e.toString(),
//						Toast.LENGTH_LONG).show();
				e.printStackTrace();
			}
			return null;
		}
	}

}
